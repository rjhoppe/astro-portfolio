---
import PageLayout from "@layouts/PageLayout.astro";
import { UPLOAD } from "@consts";

const assignees = [
  "Justin",
  "Kaylin",
  "Liz",
  "Lorraine",
  "Rachel",
  "Rick",
  "Tyler",
  "Other",
];

// if (Astro.locals.user === null) {
//   return Astro.redirect("/login");
// }

// Shared class definitions
const inputClass =
  "border border-black/15 bg-transparent dark:border-stone-600 rounded-lg dark:bg-stone-700 py-1 px-2";
const buttonClass =
  "relative group flex flex-nowrap py-1 px-3 rounded-lg border border-black/15 dark:border-white/20 hover:bg-black/5 dark:hover:bg-white/5 hover:text-black dark:hover:text-white transition-colors duration-300 ease-in-out";
---

<PageLayout title={UPLOAD.TITLE} description={UPLOAD.DESCRIPTION}>
  <div class="space-y-10 mx-10">
    <!-- Header Block -->
    <div id="header-block" class="flex items-center justify-between">
      <h1 class="text-xl font-semibold">Add New Gifts</h1>
      <div id="btn-group" class="flex space-x-4">
        <button id="restore-btn" class={buttonClass}>Restore</button>
        <button id="add-row-btn" class={buttonClass}>+ Add Record</button>
      </div>
    </div>

    <!-- Form Block -->
    <form
      id="form-block"
      action="/api/gifts/submit"
      method="POST"
      class="space-y-6"
    >
      <div id="entries">
        <!-- Form Entry Template -->
        <div
          id="form-entry-1"
          data-group="gift-entries"
          class="flex flex-wrap gap-4"
        >
          <div class="flex flex-col w-56">
            <label class="my-2">Name</label>
            <input class={inputClass} type="text" name="name" required />
          </div>

          <div class="flex flex-col w-64">
            <label class="my-2">Link</label>
            <input class={inputClass} type="url" name="link" required />
          </div>

          <div class="flex flex-col w-40">
            <label class="my-2">Assignee</label>
            <select name="assignee" class={inputClass}>
              <option value="Unassigned" selected>Unassigned</option>
              {assignees.map((val) => <option value={val}>{val}</option>)}
            </select>
          </div>

          <div class="flex flex-col w-32">
            <label class="my-2">Bought?</label>
            <select name="bought" class={inputClass}>
              <option value="Yes">Yes</option>
              <option value="No" selected>No</option>
            </select>
          </div>

          <div class="flex flex-col flex-1 min-w-[200px]">
            <label class="my-2">Notes</label>
            <input class={inputClass} type="text" name="notes" />
          </div>

          <div class="flex items-end">
            <button
              type="button"
              class="ml-3 mb-1 font-bold"
              data-group="delete-entry-btns"
              onclick="deleteFormRow(this)">X</button
            >
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-end">
        <button id="submit-btn" class={buttonClass}>Submit</button>
      </div>
    </form>
  </div>

  <!-- Script Block -->
  <script>
    declare global {
      interface Window {
        deleteFormRow: (button: HTMLButtonElement) => void;
      }
    }

    const entryTemplate = document.getElementById("form-entry-1");
    const entriesContainer = document.getElementById("entries");
    const addRowBtn = document.getElementById("add-row-btn");
    const cleanEntryHTML = entryTemplate?.outerHTML || "";

    // Clone entry from clean template
    addRowBtn?.addEventListener("click", () => {
      if (entriesContainer) {
        entriesContainer.insertAdjacentHTML("beforeend", cleanEntryHTML);
      }
    });

    // Delete entry row
    window.deleteFormRow = (button) => {
      const row = button.closest("[data-group='gift-entries']");
      if (row) row.remove();
    };

    // Form submission
    const form = document.getElementById("form-block");
    form?.addEventListener("submit", async (event) => {
      event.preventDefault();
      const giftEntries = document.querySelectorAll(
        "[data-group='gift-entries']",
      );
      const submissions = Array.from(giftEntries).map(async (gift) => {
        const giftData = {
          name:
            (gift.querySelector("input[name='name']") as HTMLInputElement)
              ?.value || "",
          link:
            (gift.querySelector("input[name='link']") as HTMLInputElement)
              ?.value || "",
          assignee:
            (gift.querySelector("select[name='assignee']") as HTMLSelectElement)
              ?.value || "",
          bought:
            (gift.querySelector("select[name='bought']") as HTMLSelectElement)
              ?.value || "",
          notes:
            (gift.querySelector("input[name='notes']") as HTMLInputElement)
              ?.value || "",
        };
        try {
          const response = await fetch("/api/gifts/submit", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(giftData),
          });
          const result = await response.json();
          if (!response.ok) throw new Error(result.message);
        } catch (err) {
          alert(err);
        }
      });

      await Promise.all(submissions);
      alert("Data successfully uploaded to database");

      // Reset to single fresh entry
      if (entriesContainer) {
        entriesContainer.innerHTML = cleanEntryHTML;
      }
    });
  </script>
</PageLayout>
